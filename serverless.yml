service: aws-todolist

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    BASE_RESOURCES_NAME: ${self:service}-${self:provider.stage}
    DYNAMODB_TABLE_TASKS: ${self:provider.environment.BASE_RESOURCES_NAME}-tasks
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - 'Fn::GetAtt': [TasksDynamoDbTable, Arn]

package:
  individually: true
  exclude:
    - '**/*'

layers:
  database:
    name: ${self:provider.environment.BASE_RESOURCES_NAME}-layers-database
    path: layers/database
    compatibleRuntimes:
      - nodejs14.x
    package:
      include:
        - ./**
  utils:
    name: ${self:provider.environment.BASE_RESOURCES_NAME}-layers-utils
    path: layers/utils
    compatibleRuntimes:
      - nodejs14.x
    package:
      include:
        - ./**

functions:
  create:
    handler: functions/create.handler
    package:
      include:
        - node_modules/**
        - functions/create.js
    layers:
      - { Ref: UtilsLambdaLayer }
      - { Ref: DatabaseLambdaLayer }
    events:
      - http:
          path: tasks
          method: post
          cors: true
  list:
    handler: functions/list.handler
    package:
      include:
        - node_modules/**
        - functions/list.js
    layers:
      - { Ref: UtilsLambdaLayer }
      - { Ref: DatabaseLambdaLayer }
    events:
      - http:
          path: tasks
          method: get
          cors: true
  get:
    handler: functions/get.handler
    package:
      include:
        - node_modules/**
        - functions/get.js
    layers:
      - { Ref: UtilsLambdaLayer }
      - { Ref: DatabaseLambdaLayer }
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true
  update:
    handler: functions/update.handler
    package:
      include:
        - node_modules/**
        - functions/update.js
    layers:
      - { Ref: UtilsLambdaLayer }
      - { Ref: DatabaseLambdaLayer }
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
  delete:
    handler: functions/delete.handler
    package:
      include:
        - node_modules/**
        - functions/delete.js
    layers:
      - { Ref: UtilsLambdaLayer }
      - { Ref: DatabaseLambdaLayer }
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true

resources:
  Resources:
    TasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_TASKS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
